<program> :: <decllist>
<decList> :: = <decl> | <decl> 
<decl> :: = varDecl | <funDecl>
<funDecl> :: = <typeSpec> ID parms  <stmt> |ID (parms) <stmt>	
<mainDecl> :: = 
<structDecl> :: = 
<struct> :: = 

<stmtList>:: = <stmtList> <stmt>
<stmt> :: =  <expStmt> | <iterStmt> | <selectStmt> | <switch> |  <print> | <break>   
<iterStmt> :: = while <simpleExp> do <stmt> | for ID=iterRange do <stmt> 
<selectStmt> :: =if <simpleExp> then <stmt> | if  simpleExp then <stmt> else <stmt>

<elseif> :: =
<switch> :: =
<case> :: =
<print> :: =

<varRepeat> :: =
<spaces> :: =
<newline> :: =
<space> :: =
<spac> :: =

<text> :: =
<break> :: =
<condition> :: =

<expStmt> :: = <exp> ; | ;
<exp> :: = <mutable> '=' <exp> | <mutable> '+=' <exp> | <mutable> '-=' <exp> | <mutable. '*=' <exp> | <mutable> '/=' <exp> | <mutable> ++|
           <mutable> --
<resExp> :: =
<complExp> :: =

<mutable> :: = ID | ID <exp> 
<call> :: = ID <args>
<args> :: = <argList> 
<argList> :: =<argList> , <exp> | <exp>
<parms> :: =<parmList> 
<parmList> :: = <parmList> ; <parmTypeList> | <parmTypeList>
<parmTypeList> :: =<typeSpec> | 

<varDecl> :: =<typeSpec> <varDeclList>
<typeSpec> :: = int | char
<varDeclList> :: =<varDeclId>,<varDeclInit> | <varDEclInit>
<varDeclInit> :: =<varDeclId> | <varDeclId> : simpleExp
<varDeclId> :: = ID | ID [NUMCONST]




